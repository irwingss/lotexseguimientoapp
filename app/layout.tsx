import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeToggle } from "@/components/ui/ThemeToggle";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { LayoutDashboard, Home } from "lucide-react";
import { createClient } from "@/lib/supabase/server";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();
  let selectedDetail: any = null;
  let isAdmin = false;
  if (user) {
    const { data } = await supabase.rpc(
      "rpc_get_expediente_seleccionado_detail"
    );
    selectedDetail = data;
    // Check admin permission via RPC; ignore errors and default to false
    try {
      const { data: adminFlag } = await supabase.rpc('is_admin');
      isAdmin = !!adminFlag;
    } catch {}
  }
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html:
              "(function(){try{var t=localStorage.getItem('theme');var d=t? t==='dark': true; var c=document.documentElement.classList; if(d){c.add('dark')}else{c.remove('dark')}}catch(e){document.documentElement.classList.add('dark')}})();",
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {/* Global selected expediente badge visible to all users - mobile polished */}
        <div className="sticky top-0 z-40 w-full border-b bg-muted/30 backdrop-blur supports-[backdrop-filter]:bg-muted/20">
          <div className="max-w-screen-2xl mx-auto pl-[calc(env(safe-area-inset-left)+16px)] pr-[calc(env(safe-area-inset-right)+16px)] sm:px-6 lg:px-8 py-2">
            <div className="grid grid-cols-1 gap-1 sm:grid-cols-2 sm:items-center">
              <div className="min-w-0 text-[11px] md:text-xs inline-flex items-center gap-1.5 rounded">
                <span className="text-muted-foreground shrink-0">Expediente:</span>
                <span className="font-medium truncate max-w-full">
                  {selectedDetail?.expediente_codigo ?? "—"}
                  {selectedDetail?.nombre ? ` — ${selectedDetail?.nombre}` : ''}
                </span>
              </div>
              <div className="flex items-center justify-start sm:justify-end gap-2">
                {isAdmin && (
                  <>
                    <Button
                      asChild
                      variant="ghost"
                      size="sm"
                      aria-label="Ir al inicio"
                      className="h-8 px-2"
                    >
                      <Link href="/" prefetch>
                        <Home className="h-4 w-4" />
                        <span className="inline ml-1.5 lg:ml-2 text-xs md:text-sm whitespace-nowrap">Inicio</span>
                      </Link>
                    </Button>
                    <Button
                      asChild
                      variant="ghost"
                      size="sm"
                      aria-label="Abrir panel de administrador"
                      className="h-8 px-2"
                    >
                      <Link href="/admin" prefetch>
                        <LayoutDashboard className="h-4 w-4" />
                        <span className="inline ml-1.5 lg:ml-2 text-xs md:text-sm whitespace-nowrap">Admin</span>
                      </Link>
                    </Button>
                  </>
                )}
                <ThemeToggle />
              </div>
            </div>
          </div>
        </div>
        {children}
      </body>
    </html>
  );
}
